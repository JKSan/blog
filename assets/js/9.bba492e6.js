(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{280:function(t,e,s){"use strict";s.r(e);var n=s(13),a=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("把几个模块升级到pinia后，发现并总结了一些问题及其解决方法，可以提高升级过程的效率。\n这里采用ts后缀文件，但其实并未真的全面应用ts。")]),t._v(" "),e("p",[t._v("一、仍然采用拆分多文件的方式，pinia store结构如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("——moduleName\n————state.ts\n————getters.ts\n————actions.ts\n————model.ts\n————index.ts\n")])])]),e("p",[t._v("其中，原state、model不用动。")]),t._v(" "),e("p",[t._v("二、index.ts\n统一这样写就行，其中ModuleName改为相应的模块名称。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("import { defineStore } from 'pinia'\nimport state from './state'\nimport getters from './getters'\nimport actions from './actions'\n\nexport const useModuleNameStore = defineStore('moduleName', {\n    state: () => state,\n\n    getters: { ...getters },\n\n    actions: { ...actions }\n})\n")])])]),e("p",[t._v("三、getters.ts\n其中，原vuex第一个参数与pinia相同，都是state，而后面的getters、rootState、rootGetters在pinia中都没有。\n对于vuex的getters参数，可以使用(this as any)替换，例如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("// getters.ts\nexport default {\n    moduleNamesFiltered: state => {\n        return state.moduleNames\n    },\n    getAllList () {\n        return () => {\n            return (this as any).moduleNamesFiltered\n        }\n    }\n}\n")])])]),e("p",[t._v("对于vuex的rootState和rootGetters参数，可分为两种情况。\n如果目标模块已经迁移到pinia，则直接把目标模块引入即可；")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("import { useModuleNameStore } from '@/stores/moduleName'\nconst moduleNameStore = useModuleNameStore();\nmoduleNameStore.xxx\n")])])]),e("p",[t._v("另一种方式，是整体把该getter方法，移到components中处理（在components节说明）。")]),t._v(" "),e("p",[t._v("四、原mutations\n整体移入actions，对于addModuleName、deleteModuleName等重名问题，可以调整为addStateModuleName的形式。")]),t._v(" "),e("p",[t._v("五、actions.ts\nactions中可以引用index.ts中的useModuleNameStore，用于调用其自身的state和getters。\n此外，对于rootState和rootGetters，与getters.ts的处理类似。\n对于commit和dispatch，如果是调用actions内部方法，则使用(this as any).xxx；如果是其它模块方法，且其它模块已迁移pinia，则直接引入该模块；否则移入components处理。")]),t._v(" "),e("p",[t._v("六、components")])])}),[],!1,null,null,null);e.default=a.exports}}]);